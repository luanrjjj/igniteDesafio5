{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/luan/Documentos/igniteDesafio 5/src/components/Form/FormAddImage.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Box, Button, Stack, useToast } from '@chakra-ui/react';\nimport { useForm } from 'react-hook-form';\nimport { useState } from 'react';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { FileInput } from '../Input/FileInput';\nimport { TextInput } from '../Input/TextInput';\nimport axios from 'axios';\nexport function FormAddImage({\n  closeModal\n}) {\n  const formats = ['png', 'jpeg', 'gif'];\n  const {\n    0: imageUrl,\n    1: setImageUrl\n  } = useState('');\n  const {\n    0: localImageUrl,\n    1: setLocalImageUrl\n  } = useState('');\n  const toast = useToast();\n  const formValidations = {\n    image: {\n      required: true,\n      validate: {\n        lessThan10MB: file => file[0].size < 10 //acceptedFormats: file => formats.includes(file[0].type) \n\n      } // TODO REQUIRED, LESS THAN 10 MB AND ACCEPTED FORMATS VALIDATIONS\n\n    },\n    title: {\n      required: 'Título obrigatório',\n      minLenght: {\n        value: 2,\n        message: 'Mínimo de 2 caracteres'\n      },\n      maxLength: {\n        value: 20,\n        message: 'Maximo de 20 caracteres'\n      }\n    },\n    description: {\n      required: 'Descrição obrigatória',\n      maxLength: {\n        value: 65,\n        message: 'Máximo de 65 caracteres'\n      } // TODO REQUIRED, MAX LENGTH VALIDATIONS\n\n    }\n  };\n  const queryClient = useQueryClient();\n  const mutation = useMutation(formData => axios.post('/api/images', formData), // TODO MUTATION API POST REQUEST,\n  {\n    onSuccess: () => {\n      queryClient.invalidateQueries('images');\n    } // TODO ONSUCCESS MUTATION\n\n  });\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState,\n    setError,\n    trigger\n  } = useForm();\n  const {\n    errors\n  } = formState;\n\n  const onSubmit = async data => {\n    try {\n      if (!imageUrl) {\n        toast({\n          title: 'Imagem não adicionada',\n          description: 'É preciso adicionar e aguardar o upload de uma imagem antes de realizar o cadastro.',\n          status: 'info'\n        });\n        return;\n      }\n\n      await mutation.mutateAsync(data);\n      toast({\n        title: 'Imagem cadastrada',\n        description: 'Sua imagem foi cadastrada com sucesso.',\n        status: 'success'\n      });\n      return; // TODO SHOW ERROR TOAST IF IMAGE URL DOES NOT EXISTS\n      // TODO EXECUTE ASYNC MUTATION\n      // TODO SHOW SUCCESS TOAST\n    } catch {\n      toast({\n        title: 'Falha no cadastro',\n        description: 'Ocorreu um erro ao tentar cadastrar a sua imagem',\n        status: 'error'\n      }); // TODO SHOW ERROR TOAST IF SUBMIT FAILED\n    } finally {\n      setImageUrl('');\n      setLocalImageUrl(''); // TODO CLEAN FORM, STATES AND CLOSE MODAL\n    }\n  };\n\n  console.log(errors.image);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    as: \"form\",\n    width: \"100%\",\n    onSubmit: handleSubmit(onSubmit),\n    children: [/*#__PURE__*/_jsxDEV(Stack, {\n      spacing: 4,\n      children: [/*#__PURE__*/_jsxDEV(FileInput, _objectSpread(_objectSpread({\n        setImageUrl: setImageUrl,\n        localImageUrl: localImageUrl,\n        setLocalImageUrl: setLocalImageUrl,\n        setError: setError,\n        trigger: trigger\n      }, register(\"Image\", formValidations.image)), {}, {\n        error: errors.image // TODO SEND IMAGE ERRORS\n        // TODO REGISTER IMAGE INPUT WITH VALIDATIONS\n\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextInput, _objectSpread(_objectSpread({\n        placeholder: \"T\\xEDtulo da imagem...\"\n      }, register('Título', formValidations.title)), {}, {\n        // TODO SEND TITLE ERRORS\n        // TODO REGISTER TITLE INPUT WITH VALIDATIONS\n        error: errors.TITLE\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextInput, _objectSpread(_objectSpread({\n        placeholder: \"Descri\\xE7\\xE3o da imagem...\"\n      }, register('Descrição', formValidations.description)), {}, {\n        error: errors.description // TODO SEND DESCRIPTION ERRORS\n        // TODO REGISTER DESCRIPTION INPUT WITH VALIDATIONS\n\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      my: 6,\n      isLoading: formState.isSubmitting,\n      isDisabled: formState.isSubmitting,\n      type: \"submit\",\n      w: \"100%\",\n      py: 6,\n      children: \"Enviar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/home/luan/Documentos/igniteDesafio 5/src/components/Form/FormAddImage.tsx"],"names":["Box","Button","Stack","useToast","useForm","useState","useMutation","useQueryClient","FileInput","TextInput","axios","FormAddImage","closeModal","formats","imageUrl","setImageUrl","localImageUrl","setLocalImageUrl","toast","formValidations","image","required","validate","lessThan10MB","file","size","title","minLenght","value","message","maxLength","description","queryClient","mutation","formData","post","onSuccess","invalidateQueries","register","handleSubmit","reset","formState","setError","trigger","errors","onSubmit","data","status","mutateAsync","console","log","TITLE","isSubmitting"],"mappings":"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","sourcesContent":["import { Box, Button, Stack, useToast } from '@chakra-ui/react';\nimport { useForm } from 'react-hook-form';\nimport { useState } from 'react';\nimport { useMutation, useQueryClient } from 'react-query';\n\nimport { api } from '../../services/api';\nimport { FileInput } from '../Input/FileInput';\nimport { TextInput } from '../Input/TextInput';\nimport axios from 'axios';\n\ninterface FormAddImageProps {\n  closeModal: () => void;\n}\n\ninterface FormAddImageData {\n  image:string;\n  title:string,\n  description:string,\n\n\n}\n\nexport function FormAddImage({ closeModal }: FormAddImageProps): JSX.Element {\n  const formats = ['png','jpeg','gif']\n  const [imageUrl, setImageUrl] = useState('');\n  const [localImageUrl, setLocalImageUrl] = useState('');\n  const toast = useToast();\n\n  const formValidations = {\n    image: {\n      required:true ,\n      validate: {\n        lessThan10MB: file => file[0].size<10,\n        //acceptedFormats: file => formats.includes(file[0].type) \n      }\n      // TODO REQUIRED, LESS THAN 10 MB AND ACCEPTED FORMATS VALIDATIONS\n    },\n    title: {\n      required:'Título obrigatório',\n      minLenght: {\n       value: 2,\n       message:'Mínimo de 2 caracteres'\n      },\n      maxLength : {\n        value:20,\n        message:'Maximo de 20 caracteres'\n      },\n    },\n    \n    description: {\n      required:'Descrição obrigatória',\n      maxLength: {\n        value:65,\n        message:'Máximo de 65 caracteres'\n      }\n\n      // TODO REQUIRED, MAX LENGTH VALIDATIONS\n    },\n  };\n\n\n  const queryClient = useQueryClient();\n  const mutation = useMutation( \n    (formData:FormAddImageData) => axios.post('/api/images',formData),  // TODO MUTATION API POST REQUEST,\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries('images')\n      }\n      // TODO ONSUCCESS MUTATION\n    }\n  );\n\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState,\n    setError,\n    trigger,\n  } = useForm();\n  const { errors } = formState;\n\n  const onSubmit = async (data:FormAddImageData ): Promise<void> => {\n    try {\n      if (!imageUrl) {\n        toast({\n          title: 'Imagem não adicionada',\n          description:\n            'É preciso adicionar e aguardar o upload de uma imagem antes de realizar o cadastro.',\n          status: 'info',\n        });\n        return;\n      }\n        await mutation.mutateAsync(data)\n        toast({\n          title: 'Imagem cadastrada',\n          description: 'Sua imagem foi cadastrada com sucesso.',\n          status: 'success',\n        });\n        return;\n      \n\n      // TODO SHOW ERROR TOAST IF IMAGE URL DOES NOT EXISTS\n      // TODO EXECUTE ASYNC MUTATION\n      // TODO SHOW SUCCESS TOAST\n    } catch {\n      toast({\n        title: 'Falha no cadastro',\n        description:\n          'Ocorreu um erro ao tentar cadastrar a sua imagem',\n        status: 'error',\n      });\n      // TODO SHOW ERROR TOAST IF SUBMIT FAILED\n    } finally {\n     setImageUrl('')\n     setLocalImageUrl('')\n\n      \n      // TODO CLEAN FORM, STATES AND CLOSE MODAL\n    }\n  };\nconsole.log(errors.image)\n  return (\n    <Box as=\"form\" width=\"100%\" onSubmit={handleSubmit(onSubmit)}>\n      <Stack spacing={4}>\n        <FileInput\n          setImageUrl={setImageUrl}\n          localImageUrl={localImageUrl}\n          setLocalImageUrl={setLocalImageUrl}\n          setError={setError}\n          trigger={trigger}\n          {...register (\"Image\", formValidations.image)}\n          error={errors.image}\n          \n          // TODO SEND IMAGE ERRORS\n          // TODO REGISTER IMAGE INPUT WITH VALIDATIONS\n        />\n\n        <TextInput\n          placeholder=\"Título da imagem...\"\n          {...register('Título',formValidations.title)}\n          // TODO SEND TITLE ERRORS\n          // TODO REGISTER TITLE INPUT WITH VALIDATIONS\n          error={errors.TITLE}\n        />\n\n        <TextInput\n          placeholder=\"Descrição da imagem...\"\n          {...register('Descrição',formValidations.description)}\n          error = {errors.description}\n          // TODO SEND DESCRIPTION ERRORS\n          // TODO REGISTER DESCRIPTION INPUT WITH VALIDATIONS\n        />\n      </Stack>\n\n      <Button\n        my={6}\n        isLoading={formState.isSubmitting}\n        isDisabled={formState.isSubmitting}\n        type=\"submit\"\n        w=\"100%\"\n        py={6}\n      >\n        Enviar\n      </Button>\n    </Box>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}