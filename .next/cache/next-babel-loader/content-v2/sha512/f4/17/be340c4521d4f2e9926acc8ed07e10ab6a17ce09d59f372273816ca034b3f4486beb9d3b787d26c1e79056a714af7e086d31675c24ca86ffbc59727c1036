{"ast":null,"code":"import _defineProperty from \"/home/luan/Documentos/igniteDesafio 5/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"/home/luan/Documentos/igniteDesafio 5/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/luan/Documentos/igniteDesafio 5/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/home/luan/Documentos/igniteDesafio 5/src/components/Form/FormAddImage.tsx\",\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { Box, Button, Stack, useToast } from '@chakra-ui/react';\nimport { useForm } from 'react-hook-form';\nimport { useState } from 'react';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { FileInput } from '../Input/FileInput';\nimport { TextInput } from '../Input/TextInput';\nvar formats = ['png', 'jpeg', 'gif'];\nexport function FormAddImage(_ref) {\n  _s();\n\n  var closeModal = _ref.closeModal;\n\n  var _useState = useState(''),\n      imageUrl = _useState[0],\n      setImageUrl = _useState[1];\n\n  var _useState2 = useState(''),\n      localImageUrl = _useState2[0],\n      setLocalImageUrl = _useState2[1];\n\n  var toast = useToast();\n  var formValidations = {\n    image: {\n      required: true,\n      validate: {\n        lessThan10MB: function lessThan10MB(v) {\n          return v.size < 10;\n        },\n        acceptedFormats: function acceptedFormats(v) {\n          return formats.includes(v.type);\n        }\n      } // TODO REQUIRED, LESS THAN 10 MB AND ACCEPTED FORMATS VALIDATIONS\n\n    },\n    title: {\n      required: 'Título obrigatório',\n      minLenght: {\n        value: 2,\n        message: 'Mínimo de 2 caracteres'\n      },\n      maxLength: {\n        value: 20,\n        message: 'Maximo de 20 caracteres'\n      }\n    },\n    description: {\n      required: 'Descrição obrigatória',\n      maxLength: {\n        value: 65,\n        message: 'Máximo de 65 caracteres'\n      } // TODO REQUIRED, MAX LENGTH VALIDATIONS\n\n    }\n  };\n  var queryClient = useQueryClient();\n  var mutation = useMutation( // TODO MUTATION API POST REQUEST,\n  {// TODO ONSUCCESS MUTATION\n  });\n\n  var _useForm = useForm(),\n      register = _useForm.register,\n      handleSubmit = _useForm.handleSubmit,\n      reset = _useForm.reset,\n      formState = _useForm.formState,\n      setError = _useForm.setError,\n      trigger = _useForm.trigger;\n\n  var errors = formState.errors;\n\n  var onSubmit = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              try {// TODO SHOW ERROR TOAST IF IMAGE URL DOES NOT EXISTS\n                // TODO EXECUTE ASYNC MUTATION\n                // TODO SHOW SUCCESS TOAST\n              } catch (_unused) {// TODO SHOW ERROR TOAST IF SUBMIT FAILED\n              } finally {// TODO CLEAN FORM, STATES AND CLOSE MODAL\n              }\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function onSubmit(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    as: \"form\",\n    width: \"100%\",\n    onSubmit: handleSubmit(onSubmit),\n    children: [/*#__PURE__*/_jsxDEV(Stack, {\n      spacing: 4,\n      children: [/*#__PURE__*/_jsxDEV(FileInput, _objectSpread(_objectSpread({\n        setImageUrl: setImageUrl,\n        localImageUrl: localImageUrl,\n        setLocalImageUrl: setLocalImageUrl,\n        setError: setError,\n        trigger: trigger\n      }, register(\"Image\", formValidations.image)), {}, {\n        error: errors.image // TODO SEND IMAGE ERRORS\n        // TODO REGISTER IMAGE INPUT WITH VALIDATIONS\n\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextInput, _objectSpread(_objectSpread({\n        placeholder: \"T\\xEDtulo da imagem...\"\n      }, register('Título', formValidations.title)), {}, {\n        // TODO SEND TITLE ERRORS\n        // TODO REGISTER TITLE INPUT WITH VALIDATIONS\n        error: errors.TITLE\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextInput, _objectSpread(_objectSpread({\n        placeholder: \"Descri\\xE7\\xE3o da imagem...\"\n      }, register('Descrição', formValidations.description)), {}, {\n        error: errors.description // TODO SEND DESCRIPTION ERRORS\n        // TODO REGISTER DESCRIPTION INPUT WITH VALIDATIONS\n\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      my: 6,\n      isLoading: formState.isSubmitting,\n      isDisabled: formState.isSubmitting,\n      type: \"submit\",\n      w: \"100%\",\n      py: 6,\n      children: \"Enviar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n}\n\n_s(FormAddImage, \"evqvplTAwNfIv6Jt6Ft1FOG2YpU=\", false, function () {\n  return [useToast, useQueryClient, useMutation, useForm];\n});\n\n_c = FormAddImage;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormAddImage\");","map":{"version":3,"sources":["/home/luan/Documentos/igniteDesafio 5/src/components/Form/FormAddImage.tsx"],"names":["Box","Button","Stack","useToast","useForm","useState","useMutation","useQueryClient","FileInput","TextInput","formats","FormAddImage","closeModal","imageUrl","setImageUrl","localImageUrl","setLocalImageUrl","toast","formValidations","image","required","validate","lessThan10MB","v","size","acceptedFormats","includes","type","title","minLenght","value","message","maxLength","description","queryClient","mutation","register","handleSubmit","reset","formState","setError","trigger","errors","onSubmit","data","TITLE","isSubmitting"],"mappings":"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","sourcesContent":["import { Box, Button, Stack, useToast } from '@chakra-ui/react';\nimport { useForm } from 'react-hook-form';\nimport { useState } from 'react';\nimport { useMutation, useQueryClient } from 'react-query';\n\nimport { api } from '../../services/api';\nimport { FileInput } from '../Input/FileInput';\nimport { TextInput } from '../Input/TextInput';\n\ninterface FormAddImageProps {\n  closeModal: () => void;\n}\n\nconst formats = ['png','jpeg','gif']\nexport function FormAddImage({ closeModal }: FormAddImageProps): JSX.Element {\n  const [imageUrl, setImageUrl] = useState('');\n  const [localImageUrl, setLocalImageUrl] = useState('');\n  const toast = useToast();\n\n  const formValidations = {\n    image: {\n      required:true ,\n      validate: {\n        lessThan10MB: v => v.size<10,\n        acceptedFormats: v => formats.includes(v.type) \n      }\n      // TODO REQUIRED, LESS THAN 10 MB AND ACCEPTED FORMATS VALIDATIONS\n    },\n    title: {\n      required:'Título obrigatório',\n      minLenght: {\n       value: 2,\n       message:'Mínimo de 2 caracteres'\n      },\n      maxLength : {\n        value:20,\n        message:'Maximo de 20 caracteres'\n      },\n    },\n    \n    description: {\n      required:'Descrição obrigatória',\n      maxLength: {\n        value:65,\n        message:'Máximo de 65 caracteres'\n      }\n\n      // TODO REQUIRED, MAX LENGTH VALIDATIONS\n    },\n  };\n\n\n  const queryClient = useQueryClient();\n  const mutation = useMutation(\n    // TODO MUTATION API POST REQUEST,\n    {\n      // TODO ONSUCCESS MUTATION\n    }\n  );\n\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState,\n    setError,\n    trigger,\n  } = useForm();\n  const { errors } = formState;\n\n  const onSubmit = async (data: Record<string, unknown>): Promise<void> => {\n    try {\n      // TODO SHOW ERROR TOAST IF IMAGE URL DOES NOT EXISTS\n      // TODO EXECUTE ASYNC MUTATION\n      // TODO SHOW SUCCESS TOAST\n    } catch {\n      // TODO SHOW ERROR TOAST IF SUBMIT FAILED\n    } finally {\n      // TODO CLEAN FORM, STATES AND CLOSE MODAL\n    }\n  };\n\n  return (\n    <Box as=\"form\" width=\"100%\" onSubmit={handleSubmit(onSubmit)}>\n      <Stack spacing={4}>\n        <FileInput\n          setImageUrl={setImageUrl}\n          localImageUrl={localImageUrl}\n          setLocalImageUrl={setLocalImageUrl}\n          setError={setError}\n          trigger={trigger}\n          {...register (\"Image\", formValidations.image)}\n          error={errors.image}\n          \n          // TODO SEND IMAGE ERRORS\n          // TODO REGISTER IMAGE INPUT WITH VALIDATIONS\n        />\n\n        <TextInput\n          placeholder=\"Título da imagem...\"\n          {...register('Título',formValidations.title)}\n          // TODO SEND TITLE ERRORS\n          // TODO REGISTER TITLE INPUT WITH VALIDATIONS\n          error={errors.TITLE}\n        />\n\n        <TextInput\n          placeholder=\"Descrição da imagem...\"\n          {...register('Descrição',formValidations.description)}\n          error = {errors.description}\n          // TODO SEND DESCRIPTION ERRORS\n          // TODO REGISTER DESCRIPTION INPUT WITH VALIDATIONS\n        />\n      </Stack>\n\n      <Button\n        my={6}\n        isLoading={formState.isSubmitting}\n        isDisabled={formState.isSubmitting}\n        type=\"submit\"\n        w=\"100%\"\n        py={6}\n      >\n        Enviar\n      </Button>\n    </Box>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}